---
title: 10-Minute Quick Start Guide for RFacebook - Create a Facebook App Using Rails in 10 Easy Steps
tags:  rails rfacebook facebook
filter:
  - erb
  - textileplus
---

h2. <%= @page.title %>

Welcome to the 10-Minute Quick Start Guide for RFacebook showing you how to create a Facebook application from scratch using Ruby on Rails in 10 easy steps:

* Install the rfacebook gem
* Create a Rails application
* Install the rfacebook Rails plugin
* Log on to Facebook and set up a new application
* Create @facebook.yml@ configuration file and add API key and secret
* Create Rails controller (and views)
* Configure default route and remove @public/index.html@ page
* Add rfacebook login code to your controller
* Use the Facebook API to get your name, profile pic and status
* That's it!

Let's get started.

<%= more %>

h3. Step 1: Install the rfacebook gem

Use the RubyGems package manager to install the rfacebook gem on your computer. Type on the command line:

{{{
$ gem install rfacebook
}}}

h3. Step 2: Create a Rails application

Note: Facebook applications require unique names. This Quick Start Guide uses @quickstart@. Replace @quickstart@ everywhere with your own unique name. 
   
Use Rails to create your web application. Type on the command line:

{{{
$ rails quickstart
}}}

h3. Step 3: Install the rfacebook Rails plugin

To turn your Rails application into a Facebook application add the rfacebook Rails plugin. Change into your Rails folder and type on the command line:

{{{
$ cd quickstart
$ script/plugin install http://rfacebook.rubyforge.org/svn/trunk/rfacebook/plugins/rfacebook
}}}

h3. Step 4: Log on to Facebook and set up a new application

Now that you have the rfacebook gem and plugin installed you need to log on to Facebook and set up your new application. Browse to the "Facebook Developers":http://facebook.com/developers page (@facebook.com/developers@) and click "Set Up New Application".

Fill in the new application form:

!/i/facebook-app-setup.png!

Use "Quick Start Example" for your Application Name. Check that you have read and agree to the terms of service. 

Set your Callback URL to @http://localhost:3000/@ (note: do not forget the trailing slash @/@) and the Canvas Page URL to @http://apps.facebook.com/quickstart/@

We build a web application using inline frames (iframe). Check (X) Use iframe and (X) Website for Application Type.

That's it. Hit submit to get your API key and secret created. Write down your API key and secret for the next step.

{{{
API Key: 47013ae80a97cc151707961fc03bc9bf
Secret: 7f296d598f9c79a5f439289e1240dc69
}}}  
  
h3. Step 5: Create facebook.yml configuration file and add API key and secret

Create the @facebook.yml@ configuration file using Rake. Type on the command line:

{{{
$ rake facebook:setup
}}}

Now open the @config/facebook.yml@ file and replace the placeholders with to your own API key and secret:

{{{
development:
  key: 47013ae80a97cc151707961fc03bc9bf
  secret: 7f296d598f9c79a5f439289e1240dc69
}}}

h3. Step 6: Create Rails controller and (views skeletons)

Let's create a Rails controller with two actions, that is, @index@ and @debug@. Type on the command line:

{{{
$ script/generate controller workshop index debug
}}}

h3. Step 7: Configure default route and remove @public/index.html@ page

Next set up the default route using the @workshop@ controller. Open @config/routes.rb@ and add the new default route (telling Rails to map @http://localhost:3000/@ requests to @http://localhost:3000/workshop/@):

{{{
map.connect '', :controller => "workshop"
}}}

And delete the @public/index.html@ page that otherwise gets displayed instead of your Ruby-generated page. Almost done.

h3. Step 8: Add rfacebook login code to controller

Now let's add some code to our @workshop@ controller and views. Add a @require_facebook_login@ filter to your @workshop@ controller and a @finish_facebook_login@ action redirecting to the index action: 

{{{
class WorkshopController < ApplicationController

  before_filter :require_facebook_login

  def finish_facebook_login
    redirect_to :action => "index"
  end

  def index
  end

  def debug
  end

end
}}}
  
That's it. Now we're all set up and ready to tap into Facebook using the API.

h3. Step 9: Use the Facebook API to get your name, profile pic and status

RFacebook offers a "built-in debug panel":http://rfacebook.rubyforge.org/debugpanel.html. All that's required to turn it on is a simple call to @render_with_facebook_debug_panel@ at the end of our @debug@ controller action. Let's add it to our @debug@ action:

{{{
def debug
  render_with_facebook_debug_panel
end
}}}

Now let's use the Facebook API to request your name, profile pic and status:

{{{
def index
  @user = fbsession.users_getInfo( 
    :uids => fbsession.session_user_id,
    :fields => ["first_name","last_name", "pic_square", "status"] )
end
}}}

And finally let's use the user data to display a Twitter-like "What are you doing?" status message. Change the @app/views/workshop/index.rhtml@ view template:

{{{
<h1>What are you doing?</h1>

<%%= image_tag @user.pic_square, :align => 'left' %>

<b><%%= @user.first_name + " " + @user.last_name %></b>
<%%= @user.status.message %>
}}}


h3. Step 10: That's it!

Start up your web server (@script/server@) and surf with your browser to @http://localhost:3000/@. If all works you will get redirected to Facebook asking you to login to your Facebook application.

!/i/facebook-access.png!

Click on "Allow" and see your new Facebook application in action. 

!/i/facebook-status.png!

To have your inline frame Facebook application hosted inside Facebook surf to @http://apps.facebook.com/quickstart@  Voila! 

<%= facebook_comments %>